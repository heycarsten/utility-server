FROM ubuntu:18.04

LABEL author="Carsten Nielsen <heycarsten@gmail.com>"
LABEL description="An Ubuntu 18.04 (bionic) base image for utility servers"

EXPOSE 22
ENTRYPOINT ["sh", "/docker-entrypoint.sh"]

ARG login_user="jmp"
ARG login_group="sudo"
ARG login_home="/home/jmp"
ARG ruby_version="2.5.3"
ARG node_version="10.15.0"
ARG nvm_version="0.33.11"
ARG python2_version="2.7.13"
ARG python3_version="3.6.1"
ARG python_global_version="3.6.1"
ARG local_timezone="Etc/UTC"

ENV HOME="/home/jmp"
ENV PYENV_ROOT="$HOME/.pyenv"
ENV RBENV_ROOT="$HOME/.rbenv"
ENV NVM_DIR="$HOME/.nvm"
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$RBENV_ROOT/shims:$RBENV_ROOT/bin:$PATH"

WORKDIR $login_home

# Copy entrypoint script
COPY config/docker-entrypoint.sh /

# Copy sudo password file
COPY config/.sudo-passwd /tmp/

# Install system packages
RUN \
  DEBIAN_FRONTEND=noninteractive \
  apt-get update -yqq && \
  # Configure timezone (non-interactive)
  echo "$local_timezone" > /etc/timezone && \
  apt-get install -yqq apt-utils tzdata && \
  dpkg-reconfigure -f noninteractive tzdata && \
  # Install packages
  apt-get install -yqq \
    man \
    bash \
    sudo \
    cron \
    curl \
    htop \
    build-essential \
    git \
    vim-nox \
    curl \
    wget \
    sqlite3 \
    libsqlite3-dev \
    bzip2 \
    openssl \
    openssh-server \
    software-properties-common \
    libbz2-dev \
    libssl-dev \
    libreadline-dev \
    libffi-dev \
    libsqlite3-dev \
    libpng-dev \
    libvips-dev \
    libfreetype6-dev \
    tk-dev && \
  # Make pid dir for sshd
  mkdir -p /var/run/sshd && \
  # Make sudoers file
  echo '%sudo	ALL=(ALL:ALL) ALL' >> /etc/sudoers && \
  # Create login user w/ sudo password
  useradd \
    --password $(cat /tmp/.sudo-passwd) \
    --shell /bin/bash \
    --create-home \
    --gid $login_group \
    $login_user && \
  # Delete password file
  rm /tmp/.sudo-passwd && \
  # Make sure $login_user:$login_group owns their home directory and contents
  mkdir -p $login_home/.cache && \
  chown -R $login_user:$login_group $login_home/ && \
  # Cleanup
  apt-get clean -yqq && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set up sshd configuration
COPY config/sshd_config /etc/ssh/sshd_config

# Copy configs
COPY \
  # config/.bashrc \
  config/.gemrc \
  config/.npmrc \
  config/.irbrc \
  config/.pryrc \
  $login_home/

# Re-own home directory
RUN chown -R $login_user:$login_group $login_home/

USER $login_user:$login_group

RUN \
  # Install Ruby (via rbenv)
  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-installer | bash && \
  rbenv install $ruby_version && \
  rbenv global $ruby_version && \
  rbenv rehash && \
  gem update --system && \
  # Install Python (via pyenv)
  curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash && \
  pyenv update && \
  pyenv install $python2_version && \
  pyenv install $python3_version && \
  pyenv global $python_global_version && \
  pyenv rehash && \
  pip install --upgrade pip && \
  # Install Node.js (via nvm)
  mkdir $NVM_DIR && \
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v${nvm_version}/install.sh | bash && \
  . $NVM_DIR/nvm.sh && \
  nvm install $node_version && \
  nvm use $node_version && \
  nvm alias default $node_version && \
  npm i -g npm
